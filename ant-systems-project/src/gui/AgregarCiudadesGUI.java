/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import edd.Matriz;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Interfaz para agregar ciudades al grado 
 *  @author Julene
 * @author Sofia
 */
public class AgregarCiudadesGUI extends javax.swing.JFrame {
    //Atributos de la clase Interfaz
    public static EditCuidadesGUI interfazB; 
    private Matriz grafo; 
    private String addedcity; 
   
    /**
     * Constructor de la clase interfaz, siendo llamada desde la interfaz de editar ciudades
     * Creates new form AgregarCiudades
     */
    public AgregarCiudadesGUI(EditCuidadesGUI interfazB) throws Exception {
        initComponents();
        this.interfazB = interfazB;
        interfazB.setVisible(false);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.grafo = interfazB.getGrafo();
        this.terminar.setVisible(false);
        this.ciudad.setVisible(false);
        this.distancia.setVisible(false);
        this.addpath.setVisible(false);
        this.texto1.setVisible(false);
        this.texto2.setVisible(false);
        uptadeScreen(); 
    }/// Fin del constructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Volver = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        addcity = new javax.swing.JButton();
        distancia = new javax.swing.JTextField();
        ciudad = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        info = new javax.swing.JTextArea();
        addpath = new javax.swing.JButton();
        terminar = new javax.swing.JButton();
        texto2 = new javax.swing.JLabel();
        notify = new javax.swing.JLabel();
        texto1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Volver.setBackground(new java.awt.Color(102, 51, 0));
        Volver.setFont(new java.awt.Font("Adobe Devanagari", 0, 14)); // NOI18N
        Volver.setForeground(new java.awt.Color(255, 255, 255));
        Volver.setText("<<Volver");
        Volver.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });
        jPanel1.add(Volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 100, 40));

        jLabel1.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Agregar Ciudades");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 220, 30));

        addcity.setText("Agregar ciudad");
        addcity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addcityActionPerformed(evt);
            }
        });
        jPanel1.add(addcity, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, -1, -1));
        jPanel1.add(distancia, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 110, -1));

        ciudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ciudadActionPerformed(evt);
            }
        });
        jPanel1.add(ciudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 100, -1));

        info.setEditable(false);
        info.setColumns(20);
        info.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        info.setRows(5);
        jScrollPane1.setViewportView(info);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, 210, 200));

        addpath.setBackground(new java.awt.Color(102, 51, 0));
        addpath.setFont(new java.awt.Font("Adobe Devanagari", 0, 14)); // NOI18N
        addpath.setForeground(new java.awt.Color(255, 255, 255));
        addpath.setText("Agregar arista");
        addpath.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addpath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpathActionPerformed(evt);
            }
        });
        jPanel1.add(addpath, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 120, -1));

        terminar.setBackground(new java.awt.Color(102, 51, 0));
        terminar.setFont(new java.awt.Font("Adobe Devanagari", 0, 14)); // NOI18N
        terminar.setForeground(new java.awt.Color(255, 255, 255));
        terminar.setText("Terminar");
        terminar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        terminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminarActionPerformed(evt);
            }
        });
        jPanel1.add(terminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 90, -1));

        texto2.setFont(new java.awt.Font("Adobe Devanagari", 0, 14)); // NOI18N
        texto2.setForeground(new java.awt.Color(255, 255, 255));
        texto2.setText("Distancia entre ciudades");
        jPanel1.add(texto2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 170, -1));
        jPanel1.add(notify, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 430, 20));

        texto1.setFont(new java.awt.Font("Adobe Devanagari", 0, 14)); // NOI18N
        texto1.setForeground(new java.awt.Color(255, 255, 255));
        texto1.setText("Ciudad Vertice");
        jPanel1.add(texto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 150, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/WhatsApp Image 2024-02-18 at 12.14.25 PM.jpg"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 350));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Metodo para volver a la interfaz EditarCIudadesGUI
     * @param evt 
     */
    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        try {
            EditCuidadesGUI interfazC = new EditCuidadesGUI(this);
        } catch (Exception ex) {
            Logger.getLogger(AgregarCiudadesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_VolverActionPerformed
    
  /**
   * Metodo para actualizar la pantalla con las ciudades y aristas
   * @throws Exception 
   */  
    private void uptadeScreen() throws Exception{
    String x = "Ciudades\n"; 
    for (int i = 0; i < this.grafo.getNumVerts(); i++) {
        x += this.grafo.vertName(i) + " - ";
    }
    x += "\n\n" + this.grafo.citiesAndPaths(); 
    this.info.setText(x);
    }
    private void ciudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ciudadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ciudadActionPerformed
    /**
     * Metodo para anadir un camino entre dos ciudades
     * @param evt 
     */
    private void addpathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpathActionPerformed
        this.notify.setText(""); 
        String vb = this.ciudad.getText();
        double d; 
        try {
            d = Double.parseDouble(this.distancia.getText()); 
            if (d<=0) {
                this.notify.setText("Por favor ingrese solo distancias positivas");
            }else {
                if (!this.grafo.isVert(vb)) {
                    this.notify.setText("Por favor ingrese una ciudad valida (Ya existente)");
                }else {
                    if (this.grafo.getMatAd()[this.grafo.numVertice(this.addedcity)][this.grafo.numVertice(vb)].getDistancia() == 0 && !this.addedcity.equals(vb)) {
                        try {
                            this.grafo.nuevaDistancia(this.addedcity, vb, d);
                            this.terminar.setVisible(true);
                        } catch (Exception ex) {
                            Logger.getLogger(AgregarCiudadesGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try { 
                            uptadeScreen();
                        } catch (Exception ex) {
                            Logger.getLogger(AgregarCiudadesGUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                    } else {
                        if (this.addedcity.equals(vb)) {
                            this.notify.setText("No puedes definir una arista consigo misma");
                        } else {
                            this.notify.setText("Esta arista ya fue definida");
                        } 
                    }
                }
            }
        } catch (NumberFormatException E){
            this.notify.setText("Por favor ingrese una distancia valida, solo numeros.");
        }
        this.ciudad.setText("");
        this.distancia.setText("");
    }//GEN-LAST:event_addpathActionPerformed
    /**
     * Metodo para retornar el grafo al que le estan siendo agregadas las ciudades
     * @return Matriz grafo. 
     */
    public Matriz getGrafo() {
        return grafo;
    }
    /**
     * Metodo para terminar de agregar las aristas para una ciudad recientemente agregadas
     * @param evt 
     */
    
    private void terminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminarActionPerformed
        this.ciudad.setVisible(false);
        this.distancia.setVisible(false);
        this.addcity.setVisible(true);
        this.terminar.setVisible(false);
        this.addpath.setVisible(false);
        this.notify.setVisible(false);
        this.texto2.setVisible(false);
        this.texto1.setVisible(false);
        this.terminar.setVisible(false);
        this.ciudad.setText("");
        this.distancia.setText("");
        this.Volver.setVisible(true);
    }//GEN-LAST:event_terminarActionPerformed
    /**
     * Metodo para crear una ciudad nueva en el grafo. 
     * @param evt 
     */
    private void addcityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addcityActionPerformed
        this.Volver.setVisible(false);
        this.terminar.setVisible(false);
        this.notify.setVisible(true);
        if (this.grafo.getNumVerts() == 20) {
            this.notify.setText("No se pueden agregar mas ciudades, se ha alcanzado el limite");
            this.terminar.setVisible(true); 
        }else {
            this.texto1.setVisible(true);
            this.texto2.setVisible(true);
            this.addcity.setVisible(false); 
            boolean found,  done = false; 
            int aux = 1; 
            while (!done) {
                found = false; 
                for (int i = 0; i < grafo.getNumVerts(); i++) {
                    if (String.valueOf(aux).equals(grafo.getVerts()[i].getNombre())) {
                        found = true; 
                    }
                }
                if (found) {
                    aux++; 
                } else {
                    done = true; 
                }
            }    
            
            this.grafo.nuevoVertice(String.valueOf(aux));
            this.addedcity = String.valueOf(aux); 
            this.ciudad.setVisible(true);
            this.distancia.setVisible(true);
            this.addpath.setVisible(true);
            try {
                uptadeScreen();
            } catch (Exception ex) {
                Logger.getLogger(AgregarCiudadesGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_addcityActionPerformed

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Volver;
    private javax.swing.JButton addcity;
    private javax.swing.JButton addpath;
    private javax.swing.JTextField ciudad;
    private javax.swing.JTextField distancia;
    private javax.swing.JTextArea info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel notify;
    private javax.swing.JButton terminar;
    private javax.swing.JLabel texto1;
    private javax.swing.JLabel texto2;
    // End of variables declaration//GEN-END:variables
}
